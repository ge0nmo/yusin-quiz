package com.cpa.yusin.quiz.mock;

import com.cpa.yusin.quiz.choice.domain.Choice;
import com.cpa.yusin.quiz.choice.service.port.ChoiceRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

import static java.util.stream.Collectors.toList;

public class FakeChoiceRepository implements ChoiceRepository
{
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<Choice> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Choice save(Choice choice) {
        if (choice.getId() == null || choice.getId() == 0) {
            Choice newChoice = Choice.builder()
                    .id(autoGeneratedId.getAndIncrement())
                    .content(choice.getContent())
                    .number(choice.getNumber())
                    .isAnswer(choice.getIsAnswer())
                    .problem(choice.getProblem())
                    .build();
            data.add(newChoice);
            return newChoice;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), choice.getId()));
            data.add(choice);
            return choice;
        }
    }

    @Override
    public List<Choice> saveAll(List<Choice> choices) {
        return choices.stream()
                .map(this::save)
                .collect(toList());
    }

    @Override
    public List<Choice> findAllByProblemId(long problemId) {
        return data.stream()
                .filter(choice -> choice.getProblem().getId() == problemId)
                .collect(toList());
    }

    @Override
    public List<Choice> findAllByProblemIds(List<Long> problemIds)
    {
        return data.stream()
                .filter(choice -> problemIds.contains(choice.getId()))
                .collect(toList());
    }

    @Override
    public List<Choice> findAllByExamId(long examId) {
        return data.stream()
                .filter(choice -> choice.getProblem().getExam().getId() == examId)
                .collect(toList());
    }

    @Override
    public Optional<Choice> findById(long id) {
        return data.stream()
                .filter(item -> item.getId() == id)
                .findFirst();
    }

    @Override
    public void deleteById(long id) {
        data.removeIf(item -> item.getId() == id);
    }

    @Override
    public void deleteAllByIdInBatch(List<Long> ids)
    {
        data.removeIf(item -> ids.contains(item.getId()));
    }

    @Override
    public void deleteAllBySubjectId(long subjectId)
    {
        data.removeIf(item -> item.getProblem().getExam().getSubjectId().equals(subjectId));
    }

    @Override
    public void deleteAllByExamId(long examId)
    {
        data.removeIf(item -> item.getProblem().getExam().getId().equals(examId));
    }
}

package com.cpa.yusin.quiz.mock;

import com.cpa.yusin.quiz.problem.domain.ProblemDomain;
import com.cpa.yusin.quiz.problem.service.port.ProblemRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

import static java.util.stream.Collectors.toList;

public class FakeProblemRepository implements ProblemRepository
{
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<ProblemDomain> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public ProblemDomain save(ProblemDomain problem)
    {
        if(problem.getId() == null || problem.getId() == 1){
            ProblemDomain newProblem = ProblemDomain.builder()
                    .id(autoGeneratedId.getAndIncrement())
                    .content(problem.getContent())
                    .number(problem.getNumber())
                    .exam(problem.getExam())
                    .build();

            data.add(newProblem);
            return newProblem;
        } else{
            data.removeIf(item -> Objects.equals(item.getId(), problem.getId()));
            data.add(problem);
        }
        return problem;
    }

    @Override
    public List<ProblemDomain> saveAll(List<ProblemDomain> problems)
    {
        return problems.stream()
                .map(this::save)
                .collect(toList());
    }

    @Override
    public List<ProblemDomain> findAllByExamId(long examId)
    {
        return data.stream()
                .filter(item -> item.getExam().getId().equals(examId))
                .toList();
    }

    @Override
    public Optional<ProblemDomain> findById(long id)
    {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findAny();
    }

    @Override
    public void deleteById(long id)
    {
        data.removeIf(item -> item.getId().equals(id));
    }

    @Override
    public void deleteAllByIdInBatch(List<Long> ids)
    {
        data.removeIf(item -> ids.contains(item.getId()));
    }

    @Override
    public boolean existsById(long id)
    {
        return data.stream()
                .anyMatch(item -> item.getId().equals(id));
    }
}

package com.cpa.yusin.quiz.mock;

import com.cpa.yusin.quiz.exam.domain.ExamDomain;
import com.cpa.yusin.quiz.exam.service.port.ExamRepository;
import com.cpa.yusin.quiz.member.domain.MemberDomain;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeExamRepository implements ExamRepository
{
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<ExamDomain> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public ExamDomain save(ExamDomain exam)
    {
        if(exam.getId() == null || exam.getId() == 0){
            ExamDomain newExam = ExamDomain.builder()
                    .id(autoGeneratedId.getAndIncrement())
                    .name(exam.getName())
                    .year(exam.getYear())
                    .subjectId(exam.getSubjectId())
                    .build();
            data.add(newExam);
            return newExam;
        } else{
            data.removeIf(item -> Objects.equals(item.getId(), exam.getId()));
            data.add(exam);
        }

        return exam;
    }

    @Override
    public Optional<ExamDomain> findById(long id)
    {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findAny();
    }

    @Override
    public List<ExamDomain> findAllBySubjectId(long subjectId, int year)
    {
        return data.stream()
                .filter(item -> item.getSubjectId().equals(subjectId) && item.getYear() == year)
                .toList();
    }

    @Override
    public void deleteById(long id)
    {
        data.removeIf(item -> item.getId().equals(id));
    }

    @Override
    public void deleteAllBySubjectId(long subjectId)
    {
        data.removeIf(item -> item.getSubjectId().equals(subjectId));
    }

    @Override
    public boolean existsById(long id)
    {
        return data.stream()
                .anyMatch(item -> item.getId().equals(id));
    }

    @Override
    public boolean existsBySubjectIdAndNameAndYear(long subjectId, String name, int year)
    {
        return data.stream()
                .anyMatch(item ->
                        item.getSubjectId().equals(subjectId)
                        && item.getName().equals(name)
                        && item.getYear() == year);
    }

    @Override
    public boolean existsByIdNotAndSubjectIdAndNameAndYear(long examId, long subjectId, String name, int year)
    {
        return data.stream()
                .anyMatch(item ->
                        !item.getId().equals(examId)
                                && item.getSubjectId().equals(subjectId)
                                && item.getName().equals(name)
                                && item.getYear() == year);
    }
}

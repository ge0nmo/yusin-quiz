package com.cpa.yusin.quiz.mock;

import com.cpa.yusin.quiz.answer.domain.Answer;
import com.cpa.yusin.quiz.answer.service.port.AnswerRepository;
import com.cpa.yusin.quiz.choice.domain.Choice;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeAnswerRepository implements AnswerRepository
{
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<Answer> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Answer save(Answer answer)
    {
        if(answer.getId() == null || answer.getId() == 0){
            Answer newAnswer = Answer.builder()
                    .id(autoGeneratedId.getAndIncrement())
                    .username(answer.getUsername())
                    .password(answer.getPassword())
                    .content(answer.getContent())
                    .question(answer.getQuestion())
                    .build();
            data.add(newAnswer);
            return newAnswer;
        } else{
            data.removeIf(item -> Objects.equals(item.getId(), answer.getId()));
            data.add(answer);
        }
        return answer;
    }

    @Override
    public Optional<Answer> findById(Long id)
    {
        return data.stream().filter(item -> Objects.equals(item.getId(), id)).findFirst();
    }

    @Override
    public Page<Answer> findByQuestionId(long questionId, Pageable pageable)
    {
        List<Answer> response = data.stream().filter(item -> Objects.equals(item.getQuestion().getId(), questionId))
                .toList();

        return new PageImpl<>(response, pageable, data.size());
    }

    @Override
    public List<Answer> findByQuestionId(long questionId) {
        return data.stream().filter(item -> Objects.equals(item.getQuestion().getId(), questionId)).toList();
    }

    @Override
    public void deleteById(long id) {
        data.removeIf(item -> Objects.equals(item.getId(), id));
    }

    @Override
    public boolean hasAnswers(long questionId) {
        return data.stream().anyMatch(item -> Objects.equals(item.getQuestion().getId(), questionId));
    }
}

package com.cpa.yusin.quiz.mock;

import com.cpa.yusin.quiz.payment.domain.Payment;
import com.cpa.yusin.quiz.payment.service.port.PaymentRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakePaymentRepository implements PaymentRepository
{
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<Payment> paymentRepository = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Payment save(Payment payment)
    {
        if(payment.getId() == null || payment.getId() == 0)
        {
            Payment newPayment = Payment.builder()
                    .id(autoGeneratedId.getAndIncrement())
                    .merchantUid(payment.getMerchantUid())
                    .status(payment.getStatus())
                    .subscription(payment.getSubscription())
                    .amount(payment.getAmount())
                    .build();

            paymentRepository.add(newPayment);
            return newPayment;
        }

        paymentRepository.removeIf(data -> data.getId().equals(payment.getId()));
        paymentRepository.add(payment);
        return payment;
    }

    @Override
    public Optional<Payment> findById(long id)
    {
        return paymentRepository.stream()
                .filter(payment -> payment.getId().equals(id))
                .findFirst();
    }

    @Override
    public Optional<Payment> findByMerchantUid(String merchantUid)
    {
        return paymentRepository.stream()
                .filter(payment -> payment.getMerchantUid().equals(merchantUid))
                .findFirst();
    }
}

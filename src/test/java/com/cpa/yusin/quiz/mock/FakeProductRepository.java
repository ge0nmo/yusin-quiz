package com.cpa.yusin.quiz.mock;

import com.cpa.yusin.quiz.product.domain.Product;
import com.cpa.yusin.quiz.product.service.port.ProductRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeProductRepository implements ProductRepository
{
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<Product> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Product save(Product product)
    {
        if (product.getId() == null || product.getId() == 0) {
            Product newProduct = Product.builder()
                    .id(autoGeneratedId.getAndIncrement())
                    .durationMonth(product.getDurationMonth())
                    .price(product.getPrice())
                    .build();
            data.add(newProduct);
            return newProduct;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), product.getId()));
            data.add(product);
        }

        return product;
    }

    @Override
    public Optional<Product> findById(Long id)
    {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findAny();
    }

    @Override
    public List<Product> findAll()
    {
        return data.stream()
                .toList();
    }

    @Override
    public void deleteById(Long id)
    {
        data.removeIf(product -> Objects.equals(product.getId(), id));
    }

    @Override
    public boolean existsById(Long id)
    {
        return data.stream()
                .anyMatch(product -> Objects.equals(product.getId(), id));
    }

    @Override
    public boolean existsByDurationMonth(Integer durationMonth)
    {
        return data.stream()
                .anyMatch(product -> Objects.equals(product.getDurationMonth(), durationMonth));
    }

    @Override
    public boolean existsByDurationMonthAndIdNot(Integer durationMonth, Long id)
    {
        return data.stream()
                .anyMatch(product -> Objects.equals(product.getDurationMonth(), durationMonth)
                        && Objects.equals(product.getId(), id));
    }
}
